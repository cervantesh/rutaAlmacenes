/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rutaalmacenes.gui;
import java.time.LocalTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import rutaalmacenes.logic.*;

/**
 *
 * @author Seelee
 */
public class FormAlmacenes extends javax.swing.JFrame {

    /**
     * Creates new form FormAlmacenes
     */
    
    private Grafo <Almacen> almacenes;
    
    public FormAlmacenes() {
        initComponents();
        aplicarFormatos();
        
        almacenes = new Grafo<>();
             
    }
    
    private void aplicarFormatos()
    {
        setLocationRelativeTo(null);
        aplicarFormatoGrid();
                
    }
    
    private void aplicarFormatoGrid()
    {
        // se reduce y se el tamano del ancho de la columna a 30 bajo la 
        // suposicion que no nunca se excederan los numero de 3 digitos 
        javax.swing.table.TableColumn columnaNumero = tablaAlmacenes.getColumnModel().getColumn(0);
        columnaNumero.setMaxWidth(30);
        columnaNumero.setMinWidth(30);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlmacenes = new javax.swing.JTable();
        menu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuArchivoCerrar = new javax.swing.JMenuItem();
        menuAlmacenes = new javax.swing.JMenu();
        menuAlmacenesAgregar = new javax.swing.JMenuItem();
        menuAlmacenesModificar = new javax.swing.JMenuItem();
        menuAlmacenesEliminar = new javax.swing.JMenuItem();
        menuCaminos = new javax.swing.JMenu();
        menuCaminosAgregar = new javax.swing.JMenuItem();
        menuCaminosModificar = new javax.swing.JMenuItem();
        menuCaminosEliminar = new javax.swing.JMenuItem();
        menuCaminosVer = new javax.swing.JMenuItem();
        menuHerramientas = new javax.swing.JMenu();
        menuHerramientaCalcularRutaOptima = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuAyudaCreditos = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("[Menu Principal]- Lista Almacenes");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tablaAlmacenes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "Identificador", "Ciudad", "Hora Inicio", "Caminos", "Tiempo", "Aislado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaAlmacenes.setToolTipText("");
        tablaAlmacenes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaAlmacenes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tablaAlmacenesFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(tablaAlmacenes);

        menu.setAutoscrolls(true);

        menuArchivo.setText("Archivo");

        menuArchivoCerrar.setText("Cerrar");
        menuArchivoCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivoCerrarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuArchivoCerrar);

        menu.add(menuArchivo);

        menuAlmacenes.setText("Almacenes");

        menuAlmacenesAgregar.setText("Agregar");
        menuAlmacenesAgregar.setToolTipText("");
        menuAlmacenesAgregar.setActionCommand("agregarAlmacen");
        menuAlmacenesAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAlmacenesAgregarActionPerformed(evt);
            }
        });
        menuAlmacenes.add(menuAlmacenesAgregar);

        menuAlmacenesModificar.setText("Modificar");
        menuAlmacenesModificar.setToolTipText("");
        menuAlmacenesModificar.setActionCommand("modificarAlmacen");
        menuAlmacenesModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAlmacenesModificarActionPerformed(evt);
            }
        });
        menuAlmacenes.add(menuAlmacenesModificar);

        menuAlmacenesEliminar.setText("Eliminar");
        menuAlmacenesEliminar.setToolTipText("");
        menuAlmacenesEliminar.setActionCommand("eliminarAlmacen");
        menuAlmacenesEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAlmacenesEliminarActionPerformed(evt);
            }
        });
        menuAlmacenes.add(menuAlmacenesEliminar);

        menu.add(menuAlmacenes);

        menuCaminos.setText("Caminos");

        menuCaminosAgregar.setText("Agregar");
        menuCaminosAgregar.setToolTipText("");
        menuCaminosAgregar.setActionCommand("agregarCamino");
        menuCaminosAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCaminosAgregarActionPerformed(evt);
            }
        });
        menuCaminos.add(menuCaminosAgregar);

        menuCaminosModificar.setText("Modificar");
        menuCaminosModificar.setToolTipText("");
        menuCaminosModificar.setActionCommand("modificarCamino");
        menuCaminosModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCaminosModificarActionPerformed(evt);
            }
        });
        menuCaminos.add(menuCaminosModificar);

        menuCaminosEliminar.setText("Eliminar");
        menuCaminosEliminar.setToolTipText("");
        menuCaminosEliminar.setActionCommand("eliminarCamino");
        menuCaminosEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCaminosEliminarActionPerformed(evt);
            }
        });
        menuCaminos.add(menuCaminosEliminar);

        menuCaminosVer.setText("Ver");
        menuCaminosVer.setToolTipText("");
        menuCaminosVer.setActionCommand("verCamino");
        menuCaminosVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCaminosVerActionPerformed(evt);
            }
        });
        menuCaminos.add(menuCaminosVer);

        menu.add(menuCaminos);

        menuHerramientas.setText("Herramientas");
        menuHerramientas.setToolTipText("");

        menuHerramientaCalcularRutaOptima.setText("Calcular Ruta Optima");
        menuHerramientaCalcularRutaOptima.setActionCommand("calcularRutaOptima");
        menuHerramientaCalcularRutaOptima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHerramientaCalcularRutaOptimaActionPerformed(evt);
            }
        });
        menuHerramientas.add(menuHerramientaCalcularRutaOptima);

        menu.add(menuHerramientas);

        menuAyuda.setText("Ayuda");
        menuAyuda.setToolTipText("");

        menuAyudaCreditos.setText("Creditos");
        menuAyudaCreditos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAyudaCreditosActionPerformed(evt);
            }
        });
        menuAyuda.add(menuAyudaCreditos);

        menu.add(menuAyuda);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuHerramientaCalcularRutaOptimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHerramientaCalcularRutaOptimaActionPerformed
        // TODO add your handling code here:
        new FormCalculoRutaOptima().setVisible(true);
    }//GEN-LAST:event_menuHerramientaCalcularRutaOptimaActionPerformed

    private void menuArchivoCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArchivoCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_menuArchivoCerrarActionPerformed

    private void menuCaminosAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCaminosAgregarActionPerformed
        // TODO add your handling code here:
        if (validarAgregarCamino(almacenes)) {
            new FormAgregarCaminos(almacenes).setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, 
                    "Para agregar camino ingresar al menos dos almacenes");
        }
        
    }//GEN-LAST:event_menuCaminosAgregarActionPerformed

    private void menuAlmacenesAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAlmacenesAgregarActionPerformed
        // TODO add your handling code here:
        new FormAgregarAlmacen(almacenes).setVisible(true);
    }//GEN-LAST:event_menuAlmacenesAgregarActionPerformed

    private void menuAlmacenesModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAlmacenesModificarActionPerformed
        if (validarModificarNodo(almacenes)) {
            new FormModificarAlmacen().setVisible(true);
        }
        else
        {
             JOptionPane.showMessageDialog(rootPane, 
                     "Debe ingresa al menos un almacen para realizar modificaciones");
        }
        
    }//GEN-LAST:event_menuAlmacenesModificarActionPerformed

    private void menuAlmacenesEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAlmacenesEliminarActionPerformed
        
        if (validarEliminarNodo(almacenes)) {
            new FormEliminarAlmacen().setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, 
                    "No existen almacenes que se puedan eliminar");
        }
    }//GEN-LAST:event_menuAlmacenesEliminarActionPerformed

    private void menuCaminosModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCaminosModificarActionPerformed
        try {
            // TODO add your handling code here:
            if (validarModificarCamino(almacenes)) {
                new FormModificarCaminos().setVisible(true);
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane,
                        "No existen caminos para modificar");
            }
        } catch (Exception ex) {
            Logger.getLogger(FormAlmacenes.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_menuCaminosModificarActionPerformed

    private void menuCaminosVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCaminosVerActionPerformed
        // TODO add your handling code here:
        new FormCaminos().setVisible(true);
    }//GEN-LAST:event_menuCaminosVerActionPerformed

    private void menuAyudaCreditosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAyudaCreditosActionPerformed
        // TODO add your handling code here:
        new FormCreditos().setVisible(true);
    }//GEN-LAST:event_menuAyudaCreditosActionPerformed

    private void menuCaminosEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCaminosEliminarActionPerformed
        // TODO add your handling code here:
        new FormEliminarCamino().setVisible(true);
    }//GEN-LAST:event_menuCaminosEliminarActionPerformed

    private void tablaAlmacenesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tablaAlmacenesFocusLost
        try {
            // TODO add your handling code here:
            updateGrid(tablaAlmacenes, almacenes);
        } catch (Exception ex) {
            Logger.getLogger(FormAlmacenes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tablaAlmacenesFocusLost

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        try {
            // TODO add your handling code here:
            updateGrid(tablaAlmacenes, almacenes);
        } catch (Exception ex) {
            Logger.getLogger(FormAlmacenes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formFocusGained

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // TODO add your handling code here:
            updateGrid(tablaAlmacenes, almacenes);
        } catch (Exception ex) {
            Logger.getLogger(FormAlmacenes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAlmacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAlmacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAlmacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAlmacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAlmacenes().setVisible(true);
            }
        });
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuAlmacenes;
    private javax.swing.JMenuItem menuAlmacenesAgregar;
    private javax.swing.JMenuItem menuAlmacenesEliminar;
    private javax.swing.JMenuItem menuAlmacenesModificar;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuArchivoCerrar;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuAyudaCreditos;
    private javax.swing.JMenu menuCaminos;
    private javax.swing.JMenuItem menuCaminosAgregar;
    private javax.swing.JMenuItem menuCaminosEliminar;
    private javax.swing.JMenuItem menuCaminosModificar;
    private javax.swing.JMenuItem menuCaminosVer;
    private javax.swing.JMenuItem menuHerramientaCalcularRutaOptima;
    private javax.swing.JMenu menuHerramientas;
    public static javax.swing.JTable tablaAlmacenes;
    // End of variables declaration//GEN-END:variables

    
    
    static public void updateGrid(javax.swing.JTable tabla, Grafo<Almacen> almacenes) throws Exception
    {
        DefaultTableModel model;
        model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0);
        
        for (int i = 0; i < almacenes.getLista().Longitud(); i++) {
            updateGridLine( almacenes,model,i );
        }
 
    }
    
    static private void updateGridLine(Grafo<Almacen> almacenes, DefaultTableModel model, int i ) throws Exception
    {
        Almacen almacen;
        String id =" ",
               nombre = " ",
               caminos =" ",
               tiempos = " ",
               aislado = " ";
        
        LocalTime horaInicio = null;
        
        if (almacenes!=null) {

                almacen = almacenes.getLista().Obtener(i);
                
                id = almacen.getID();
                nombre = almacen.getNombre();
                horaInicio = almacen.getHoraDeApertura();
                
            
            model.addRow(new Object[]{i+1, id, nombre, horaInicio, caminos, tiempos, aislado});
        }
    }
    
    private boolean validarAgregarCamino(Grafo grafo)
    {
        return grafo.getLista().Longitud() > 1;
    }
    
    private boolean validarModificarNodo(Grafo grafo)
    {
        return !grafo.EsVacio();
    }
    
    private boolean validarEliminarNodo(Grafo grafo)
    {
        return !grafo.EsVacio();
    }
    
    private boolean validarModificarCamino(Grafo grafo) throws Exception {
        if (!validarAgregarCamino(grafo)|| !grafo.ExistenArcos()) {
            
            return false;
        }
        
        return true;
        
    }
}
